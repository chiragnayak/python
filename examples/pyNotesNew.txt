

Q. What is interperter?
A.

Q. What is compiler ?
A.

Q. What are tuples ?
A.


################################################################################
#################### BUILD IN TYPES ################# ####################
################################################################################


The principal built-in types are:

	numerics: 
		int, 
			Booleans are a subtype of integers
		float, 
		complex: Complex numbers have a real and imaginary part, which are each a floating point number. To extract these parts from a complex number z, use z.real and z.imag
		
	sequences, 
		one way:
			list : Lists are mutable sequences, typically used to store collections of homogeneous items
			tuple : Tuples are immutable sequences, typically used to store collections of heterogeneous data 
			range : an immutable sequence of numbers and is commonly used for looping a specific number of times in for loops.
		Another way:
			Immutable Sequence Types : support hash() built-in, ex : tuple
			Mutable Sequence Types
	mappings, 
	classes, 
	instances
	exceptions.
	
Other Way :
	Numeric Types (int, float, complex)
	Iterator Types
		Generator Types
	Sequence Type : 
		(list [mutable],
		tuple [immutable], 
		range [immutable])
	Text Sequence Type 
		str [immutable] : NOTE : A string is a sequence of characters and a list is a sequence of values, but a list of characters is not the same as a string.
	Binary Sequence Types 
		(byte [immutable], 
		bytearray[mutable], memoryview)
	Set types : 
		set, : mutable, the contents can be changed using methods like add() and remove(). A set object is an unordered collection of distinct hashable objects. 
		frozenset :  type is immutable and hashable )
	Mapping Types 
		dict : A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects.
			   
	Context Manager Types
		
	
-------------- T VALUE --------------

The following values are considered false:

    None
    False
    zero of any numeric type, for example, 0, 0.0, 0j.
    any empty sequence, for example, '', (), [].
    any empty mapping, for example, {}.
    instances of user-defined classes, if the class defines a __bool__() or __len__() method, when that method returns the integer zero or bool value False. [1]

All other values are considered true â€” so objects of many types are always true.

------------- Boolean Operations ------------------

Operation 	Result 									Notes
x or y 		if x is false, then y, else x 			(1)
x and y 	if x is false, then x, else y 			(2)
not x 		if x is false, then True, else False 	(3)

Notes:

  (1)  This is a short-circuit operator, so it only evaluates the second argument if the first one is false.
  (2)  This is a short-circuit operator, so it only evaluates the second argument if the first one is true.
  (3)  not has a lower priority than non-Boolean operators, so not a == b is interpreted as not (a == b), and a == not b is a syntax error.

------------ BIT WISE OPERATIONS ---------------

Operation 	Result 	Notes
x | y 	bitwise or of x and y 	 
x ^ y 	bitwise exclusive or of x and y 	 
x & y 	bitwise and of x and y 	 
x << n 	x shifted left by n bits 	(1)(2)
x >> n 	x shifted right by n bits 	(1)(3)
~x 	the bits of x inverted

------------- Comparisons -------------

Operation 	Meaning
< 	strictly less than
<= 	less than or equal
> 	strictly greater than
>= 	greater than or equal
== 	equal
!= 	not equal
is 	object identity
is not 	negated object identity


------------ Common Sequence operations ----------- 

s and t are sequences of the same type, n, i, j and k are integers and x is an arbitrary object that meets any type and value restrictions imposed by s.

Operation 	Result 	Notes
x in s 				True if an item of s is equal to x, else False 	(1)
x not in s 			False if an item of s is equal to x, else True 	(1)
s + t 				the concatenation of s and t 	(6)(7)
s * n or n * s 		equivalent to adding s to itself n times 	(2)(7)
s[i] 				ith item of s, origin 0 	(3)
s[i:j] 				slice of s from i to j 	(3)(4)
s[i:j:k] 			slice of s from i to j with step k 	(3)(5)
len(s) 				length of s 	 
min(s) 				smallest item of s 	 
max(s) 				largest item of s 	 
s.index(x[, i[, j]]) 	index of the first occurrence of x in s (at or after index i and before index j) 	(8)
s.count(x) 			total number of occurrences of x in s


Note (TRY):

>>> lists = [[]] * 3
>>> lists
[[], [], []]
>>> lists[0].append(3)
>>> lists
[[3], [3], [3]]

What has happened is that [[]] is a one-element list containing an empty list, so all three elements of [[]] * 3 are references to this single empty list. 
Modifying any of the elements of lists modifies this single list. 

You can create a list of different lists this way:

>>> lists = [[] for i in range(3)]
>>> lists[0].append(3)
>>> lists[1].append(5)
>>> lists[2].append(7)
>>> lists
[[3], [5], [7]]

----------------- OPERATION ON MUTABLE SEQ TYPES -----------------

Operation 			Result 																	Notes
s[i] = x 			item i of s is replaced by x 	 
s[i:j] = t 			slice of s from i to j is replaced by the contents of the iterable t 	 
del s[i:j] 			same as s[i:j] = [] 	 
s[i:j:k] = t 		the elements of s[i:j:k] are replaced by those of t 	(1)
del s[i:j:k] 		removes the elements of s[i:j:k] from the list 	 
s.append(x) 		appends x to the end of the sequence (same as s[len(s):len(s)] = [x]) 	 
s.clear() 			removes all items from s (same as del s[:]) 	(5)
s.copy() 			creates a shallow copy of s (same as s[:]) 	(5)
s.extend(t) or s += t 	extends s with the contents of t (for the most part the same as s[len(s):len(s)] = t) 	 
s *= n 				updates s with its contents repeated n times 	(6)
s.insert(i, x) 		inserts x into s at the index given by i (same as s[i:i] = [x]) 	 
s.pop([i]) 			retrieves the item at i and also removes it from s 	(2)
s.remove(x) 		remove the first item from s where s[i] == x 	(3)
s.reverse() 		reverses the items of s in place

Q. How to Create lists ?
A. 	Lists may be constructed in several ways:

    Using a pair of square brackets to denote the empty list: []
    Using square brackets, separating items with commas: [a], [a, b, c]
    Using a list comprehension: [x for x in iterable]
    Using the type constructor: list() or list(iterable)
	
	Examples:
	
	>>> a = [1, 2, 3]
	>>> b = [4, 5, 6]
	>>> c = a + b
	>>> print(c)
	[1, 2, 3, 4, 5, 6]
	
	>>> [0] * 4
	[0, 0, 0, 0]
	>>> [1, 2, 3] * 3
	[1, 2, 3, 1, 2, 3, 1, 2, 3]
	
Q. How to create tuples ?
A. Tuples may be constructed in a number of ways: (observed round-bracket)

    Using a pair of parentheses to denote the empty tuple: ()
    Using a trailing comma for a singleton tuple: a, or (a,)
    Separating items with commas: a, b, c or (a, b, c)
    Using the tuple() built-in: tuple() or tuple(iterable)

Q. How to create ranges?
A. 
	range(stop)
	range(start, stop)
	range (start, stop, step)
	
	start:     The value of the start parameter (or 0 if the parameter was not supplied)
	stop :     The value of the stop parameter
	step :     The value of the step parameter (or 1 if the parameter was not supplied)
Q. How to crate strings ?
A.
    Single quotes: 'allows embedded "double" quotes'
    Double quotes: "allows embedded 'single' quotes".
    Triple quoted: '''Three single quotes''', """Three double quotes"""
	
	b	a	n	a	n	a
   [0] [1] [2] [3] [4] [5]
  [-6][-5][-4] [-3] [-2][-1]

Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal.

Q. How to create bytes literals?
A. Firstly, the syntax for bytes literals is largely the same as that for string literals, except that a b prefix is added:

    Single quotes: b'still allows embedded "double" quotes'
    Double quotes: b"still allows embedded 'single' quotes".
    Triple quoted: b'''3 single quotes''', b"""3 double quotes"""
	
Q. How to create distionary ?
A. Dictionaries can be created by placing a comma-separated list of key: value pairs within braces, 

	for example: 


	{'jack': 4098, 'sjoerd': 4127} 
	{4098: 'jack', 4127: 'sjoerd'}, or by the dict constructor.

	>>> a = dict(one=1, two=2, three=3)
	>>> b = {'one': 1, 'two': 2, 'three': 3}
	>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
	>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
	>>> e = dict({'three': 3, 'one': 1, 'two': 2}) # CN : if u r using : (colon) u need to use { } (curly brackets)
	>>> a == b == c == d == e
	True


default_data['item3'] = 3

wordDict.update(wordDict [some_expression] =  count) # this will give error : SyntaxError: keyword can't be an expression (here, some_expression is a keyword)

Q. How update() works? 
A.  Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None.

    update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two). 
	
	If keyword arguments are specified, the dictionary is then updated with those key/value pairs: 
	
	d.update(red=1, blue=2).
	
Q. Basic example of Dictionary iteration ?
A. Note : the keys are in no particular order.

counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
	print(key, counts[key])
	
	o/p:
	====
	jan 100
	chuck 1
	annie 42


Q. How to fetch values from dictionary ?
A. dicObj['key']

 dict.keys(), 
 dict.values()
 dict.items()
 
 Examples : 
 
>>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
>>> keys = dishes.keys()
>>> values = dishes.values()

>>> # iteration
>>> n = 0
>>> for val in values:
...     n += val
>>> print(n)
504

>>> # keys and values are iterated over in the same order
>>> list(keys)
['eggs', 'bacon', 'sausage', 'spam']
>>> list(values)
[2, 1, 1, 500]

>>> # view objects are dynamic and reflect dict changes
>>> del dishes['eggs']
>>> del dishes['sausage']
>>> list(keys)
['spam', 'bacon']

>>> # set operations
>>> keys & {'eggs', 'bacon', 'salad'} # what is in keys that is present in R.H.S of '&', basically intersaction operation
{'bacon'}
>>> keys ^ {'sausage', 'juice'}
{'juice', 'sausage', 'bacon', 'spam'}

Q. How to create a set ?
A. x = set ([1,2,3,4])

Like other collections, sets support x in set, len(set), and for x in set. 
Being an unordered collection, sets do not record element position or order of insertion. 
Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.

Q. What is relaion between list and dictionary ?
A. A dictionary is like a list, but more general. 
	In a list, the index positions have to be integers; in a dictionary, the indices can be (almost) any type.
	
	A dictionary can be considered as a mapping between a set of indices (which are
	called keys) and a set of values. 
	
	Each key maps to a value. 
	
	The association of a key and a value is called a key-value pair or sometimes an item.
	
	
Q. What is difference of using in operator in lists v/s dict ?
A. The 'in' operator uses different algorithms for lists and dictionaries. 

	For lists, it uses a linear search algorithm. As the list gets longer, the search time gets longer
	in direct proportion to the length of the list. 

	For dictionaries, Python uses an algorithm called a hash table that has a remarkable property: the in operator
	takes about the same amount of time no matter how many items there are in a
	dictionary.
	
Q. How translate workds ?
A. line.translate(str.maketrans(fromstr, tostr, deletestr))

Replace the characters in fromstr with the character in the same position in tostr and delete all characters that are in deletestr. 
The fromstr and tostr can be empty strings and the deletestr parameter can be omitted.